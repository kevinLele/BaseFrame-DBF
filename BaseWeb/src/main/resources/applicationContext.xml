<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 系统配置 -->
    <context:property-placeholder location="classpath:config.properties" ignore-unresolvable="true"/>

    <!-- 自动装载的包 -->
    <context:component-scan base-package="com.hq.dbf.BaseWeb.restful"/>
    <context:component-scan base-package="com.hq.dbf.BaseWeb.sys"/>

    <bean id="mybatisRealm" class="com.hq.dbf.BaseWeb.sys.realm.MybatisRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="MD5"/>
                <!-- true means hex encoded, false means base64 encoded -->
                <property name="storedCredentialsHexEncoded" value="true"/>
            </bean>
        </property>
        <property name="authorizationCachingEnabled" value="false"/>
    </bean>

    <bean id="casRealm" class="com.hq.dbf.BaseWeb.sys.realm.CasRealm">
        <!-- 不使用Shiro自带的缓存方案, 缓存统一使用Spring Cache -->
        <property name="authorizationCachingEnabled" value="false"/>
    </bean>

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <property name="realm" ref="casRealm"/>
    </bean>

    <!-- Shiro 的Web过滤器-->
    <bean id="ShiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.html"/>
        <property name="filterChainDefinitions">
            <value>
                /login.html = anon
                /restful/sys/login = anon
                /restful/helloworld/** = anon
                /img/** = anon
                /css/** = anon
                /js/** = anon
                /logout = logout
                /** = anon
            </value>
        </property>
        <!--自定义拦截器-->
        <property name="filters">
            <map>
                <entry key="ipAuthc" value-ref="ipFilter"/>
                <entry key="casLoginFilter" value-ref="casLoginFilter"/>
            </map>
        </property>
    </bean>

    <bean id="loginFilter" class="com.hq.dbf.BaseWeb.sys.filter.LoginFilter"></bean>

    <!-- 支持shiro的权限验证的注解 -->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"
          p:securityManager-ref="securityManager"/>

    <!-- 用于支持自定义操作日志的注解 -->
    <bean id="logMethodInterceptor"
          class="com.hq.dbf.BaseWeb.utils.log.LogMethodInterceptor"/>
    <bean class="com.hq.dbf.BaseWeb.utils.log.LogPointcutAdvisor">
        <constructor-arg name="advice" ref="logMethodInterceptor"/>
    </bean>

    <!-- 用于支持自定义验证的注解 -->
    <bean id="validationMethodInterceptor"
          class="com.hq.dbf.BaseWeb.utils.validation.ValidationMethodInterceptor"/>
    <bean class="com.hq.dbf.BaseWeb.utils.validation.ValidationPointcutAdvisor">
        <constructor-arg name="advice" ref="validationMethodInterceptor"/>
    </bean>

    <!-- 使用cglib进行动态代理 -->
    <!-- proxy-target-class:为true表示基于类进行代理，否则只支持接口方式的代理 -->
    <!-- expose-proxy: 开启暴露Aop代理到ThreadLocal支持,即可以通过AopContext.currentProxy()获取当前代理对象 -->
    <aop:aspectj-autoproxy proxy-target-class="true" expose-proxy="true"/>

    <import resource="dubbo-consumer.xml"/>

    <import resource="spring-cache.xml"/>

    <import resource="redis-config.xml"/>

</beans>